#include<iostream> 
#include<cmath> 
#include<vector> 
#include<algorithm> 

// Do usunięcia!
// Wersja standalone - nie komunikuje się z innymi modułami, pracuje na przykładowych danych.


void TWaveAlt (std::vector<double> ecg, std::vector<int> Tonset, std::vector<int> Tend, int fc) {


	/*
	int minlength = std::min(Tonset.size(), Tend.size());
	double tVal[minlength], localMaxVal;
	int tPos[minlength], localMaxPos;
	

	// Finding positions and values of T-peaks based on T-onset and T-end from WAVES
    for (int ti=0; ti<minlength; ti++){
    	
    	localMaxPos=Tonset[ti];
    	localMaxVal=std::abs(ecg[localMaxPos]);
    			
    	for (int s=Tonset[ti]+1; s<= Tend[ti]; s++){ 
    		if (std::abs(ecg[s]>localMaxVal)){
    			localMaxPos = s;
    			localMaxVal = std::abs(ecg[s]);
    		}
    	}
 
    	tPos[ti]= localMaxPos;
    	tVal[ti]= localMaxVal;
    }
    */

	// *****TMP**********
	int tPos[]={198,465,718,972,1237,1508,1786,2076,2367,2643,2910,3172,3425,3677,3940,4219,4504,4793,5083,5365,5626,5878,6132,6389,6646,6913,7201,7498,7785,8068,8343,8602,8846,9090,9346,9612,9889,10183,10482,10771,11042,11302,11554,11800,12048,12312,12594,12886,13175,13460,13735,13999,14252,14505,14769,15044,15318,15591,15869,16149,16419,16682,16953,17229,17497,17760,18027,18296,18561,18826,19095,19371,19645,19915,20183,20447,20710,20977,21242,21504,21774,22050,22315,22567,22823,23091,23354,23608,23872,24148,24418,24669,24921,25180,25433,25677,25925,26189,26457,26710,26960,27217,27469,27707,27939,28182,28439,28689,28931,29178,29432,29678,29906,30130,30364,30606,30843,31078,31318,31569,31812,32042,32264,32490,32720,32946,33168,33398,33638,33882,34119,34349,34580,34806,35024,35236,35453,35679,35911,36143,36378,36619,36857,37081,37292,37503,37720,37939,38156,38377,38612,38859,39099,39326,39546,39767,39985,40195,40401,40614,40841,41078,41313,41544,41776,42005,42227,42442,42655,42874,43098,43323,43549,43777,44004,44227,44444,44661,44881,45103,45326,45555,45791,46026,46254,46474,46692,46909,47122,47330,47539,47760,47992,48228,48462,48696,48933,49166,49383,49588,49791,50003,50221,50438,50656,50884,51127,51373,51606,51827,52046,52266,52480,52685,52883,53091,53318,53557,53793,54025,54263,54506,54736,54946,55145,55347,55559,55776,55990,56207,56437,56682,56928,57162,57388,57610,57830,58044,58251,58459,58672,58894,59125,59357,59588,59815,60041,60269,60493,60711,60926,61147,61378,61607,61830,62050,62271,62496,62717,62932,63147,63371};
	double tVal[]={189.434977791315,194.944155542492,213.036244468511,189.746828396058,214.693367156740,203.746320284356,210.822545019432,132.175804879787,167.184813305067,193.326576606066,225.399332495062,212.103625395001,233.838180243641,208.351942952797,224.508963285502,189.276662195983,154.299247537525,141.119821988268,211.678740305547,207.627042091740,231.766470189042,215.972571710553,234.168292268692,214.397751080943,229.669156222474,181.352172980510,144.064855610459,169.862334163621,218.625146271302,179.547596344259,164.794532213175,151.361006065483,194.667640496581,196.165892292956,209.423919012917,159.284555579198,146.149311854725,162.892697949930,211.989763275494,147.571617212031,151.323696061118,137.600575313181,160.157650428545,154.145897568084,175.921504061933,138.124279114347,149.339153187445,185.261939646148,213.162879360000,144.908393995366,149.516581912083,139.350901506480,159.083499702534,139.288690886312,155.516339332563,166.282108087778,212.088492758597,201.320552722837,208.250476842583,143.334147541749,151.010994080640,135.063709982413,162.591837540354,184.109318911770,220.601084604367,207.512382400059,228.011467732099,205.012530365097,211.553700388130,167.972038737433,157.083362018804,133.116555306792,169.425309538816,183.264525528801,217.338643807024,206.331800995648,227.355172629009,209.538861003423,224.387765643565,190.682298993045,173.966778299211,131.463121550790,154.479471570752,139.817113960150,153.437202324846,138.353166010939,167.302485239146,150.768066175200,175.739869666680,188.883988753694,226.415065049604,209.859333758819,220.052916684385,203.371864503151,223.510277839126,192.273673078510,191.367922637087,181.902950288270,215.492952585077,200.604879563912,209.435658108369,189.667867212166,205.659037600117,162.036174085434,163.772813233711,146.383438080959,163.962652122062,163.301944092182,211.374433487640,204.680604917853,225.531202785087,215.932260773394,217.171651388547,154.994444997061,164.607203271679,170.386246972235,225.826008720951,211.813589720915,213.755918269658,186.182866748380,187.899672815704,152.370782230858,207.939170012986,213.944392323599,208.852084412954,155.416213346948,190.175980059181,207.013029077022,223.049306354639,196.231522420302,191.605241154194,145.778608500476,180.214140873196,210.862655240420,209.787746701927,161.652370974027,222.264174285841,203.657926302017,192.364020671481,143.732275359474,160.957858595921,170.941421801662,224.443258760113,197.608201415870,178.311432638521,202.682332891737,214.865617324557,156.299598702178,197.070554522348,208.816263629593,204.544073502662,172.680348058574,168.431236466367,153.596389856281,223.265430076824,193.799137663103,173.117172812133,198.503248407754,210.501330574984,151.894969686202,193.349059614912,203.144949852093,218.569856129226,174.637306120389,158.865793613817,161.234053885382,227.194167262710,182.337601805893,173.706443801331,203.345628919570,214.731260105317,157.046445584852,166.460270546386,194.587760044594,221.660217031376,168.632846433274,175.972704199969,206.643206641729,205.426765316427,149.717096850832,187.011702520036,206.026962483796,215.884987498353,176.349211982599,163.985264854829,181.865991728724,224.377965469252,165.012365395435,192.837546761931,205.131400118646,173.655506640830,167.514941241830,218.761377630576,201.062249769381,198.047921518822,146.884714303395,154.373216412423,174.497827267380,226.227095623924,167.439720363545,221.382562493172,190.945201009303,167.694775250702,188.333955197498,220.096748143630,165.105305652204,156.182242201565,134.656014274582,176.314776163747,209.096163117977,201.695282826012,153.629158953423,217.852274441025,187.198498357369,196.806052816520,204.809669758584,186.145308165372,141.580614747958,155.799988316817,174.550901573098,216.865067553415,203.096353418687,202.224938374697,169.394939803532,228.637044180263,163.895680391990,205.592094267717,202.250342878058,175.879188801635,171.351714683626,218.090047182742,198.072715766774,212.750576254305,175.716049706539,163.787677595204,181.213604915739,224.156653316814,165.620543074859,204.349641176249,199.982192857353,169.517213860200,168.628400134697,222.301744617824,195.795626002932,183.254150728550,144.315244370139,196.035857646183,208.625516884236,199.097616799846,155.023216533159,219.562976081845,198.518939935508,179.742818678039,145.707544163789,204.686582395892,203.208866042628,179.741896291650,150.926930858429,219.055325477063,191.396613393069,168.231766797496,174.860370761618};
  // *******************
    
	// Iterators and parameters
    int beats = 16;     		// amount of Tpeaks analysed at a time 
    double maxTWA=0;    		// maximum value of detected TWA (0 for no TWA detected)
    std::vector<int> resPos; 	// positions of T-waves containing TWA (relative to ecg)
    
    
    // ECG window analisyng
    int tValLength = sizeof(tVal)/sizeof(*tVal);
    int limit = std::floor(tValLength/beats);
    int iBegin, iEnd, t, ki, z, i=0;
    double twa;
    std::vector<double> tWave;
			
		
    // Heart rate measuring     	
    double time=(1.0/fc)*63685.0; // zmienic jak bedzie baseline
	  double HR=60.0*tValLength/time;
	
    
    while (i<limit){
		
		tWave.clear();
		
        iBegin=(i*beats);
        iEnd=std::min((i+1)*beats, tValLength+1)-1;
        
		
    	  for(ki=iBegin+1; ki<=iEnd; ki=ki+2){
        	tWave.push_back( tVal[ki]-tVal[ki-1] ); // difference between odd and even T waves
        }

		// TWA detection
        z=0;  // amount of zero-crossings
        for (int k=0; k<tWave.size(); k++){
            if ( tWave[k]/(tWave[k+1]+0.000000000000001)<0 ){
                z=z+1;
            }
        }

      if (z<0.3*tWave.size() & HR>65 & HR<190){ 	// searching for TWA
        	
			    double  minresult = *std::min_element(tWave.begin(), tWave.end());
			    double  maxresult = *std::max_element(tWave.begin(), tWave.end());
			    twa = 1000*  std::max(std::abs(minresult), maxresult);
        	
			    maxTWA=std::max(maxTWA, twa);
			
			    for (int r=iBegin; r<=iEnd; r++){
			        resPos.push_back(tPos[r]);
			    }
			
			
		  }
      else{
          twa=0;
      }
		
      i=i+1;
        

	}


	
	std::cout << "Max TWA equals: " << maxTWA << "\n\n";
	std::cout << "Result positions of TWA: \n";
	for (unsigned i=0; i<resPos.size(); i++){
      std::cout << resPos.at(i) << "\n";
	}
	

}



int main (){
	std::vector<double> ecg = {-99999};
	std::vector<int> Tonset ={-99};
	std::vector<int> Tend ={-99};
	int fc=500;
	
	TWaveAlt(ecg, Tonset, Tend, fc);
}
